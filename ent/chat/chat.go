// Code generated by entc, DO NOT EDIT.

package chat

import (
	"fmt"
)

const (
	// Label holds the string label denoting the chat type in the database.
	Label = "chat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the chat in the database.
	Table = "chats"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "chat_members"
	// MembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MembersInverseTable = "users"
	// MessagesTable is the table that holds the messages relation/edge. The primary key declared below.
	MessagesTable = "chat_messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
)

// Columns holds all SQL columns for chat fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDeleted,
}

var (
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"chat_id", "user_id"}
	// MessagesPrimaryKey and MessagesColumn2 are the table columns denoting the
	// primary key for the messages relation (M2M).
	MessagesPrimaryKey = []string{"chat_id", "message_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePrivate Type = "private"
	TypePublic  Type = "public"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePrivate, TypePublic:
		return nil
	default:
		return fmt.Errorf("chat: invalid enum value for type field: %q", _type)
	}
}
